<?php

namespace Mouf\Mvc\Splash\Services;

use ReflectionParameter;

/**
 * This class fetches the parameter from the request.
 *
 * @author David Negrier
 */
class SplashRequestParameterFetcher implements ParameterFetcher
{
    /**
     * Returns whether this fetcher factory can handle the parameter passed in parameter for the url $url.
     *
     * @param ReflectionParameter $reflectionParameter
     * @param string              $url
     *
     * @return bool
     */
    public function canHandle(ReflectionParameter $reflectionParameter, string $url = null) : bool
    {
        // Yes, we can! (always)
        return true;
    }

    /**
     * Returns some data needed by this fetcher to fetch data from the request.
     * This data MUST be serializable (and will be serialized). This function will be called only once
     * and data cached. You can perform expensive computation in this function.
     *
     * @param ReflectionParameter $reflectionParameter
     * @param string|null         $url
     *
     * @return mixed
     */
    public function getFetcherData(ReflectionParameter $reflectionParameter, string $url = null)
    {
        if ($reflectionParameter->isDefaultValueAvailable()) {
            return [
                'key' => $reflectionParameter->getName(),
                'compulsory' => false,
                'default' => $reflectionParameter->getDefaultValue(),
            ];
        } else {
            return [
                'key' => $reflectionParameter->getName(),
                'compulsory' => true,
            ];
        }
    }

    /**
     * Returns the value to be injected in this parameter.
     *
     * @param mixed                $data    The data generated by "getFetcherData"
     * @param SplashRequestContext $context
     *
     * @return mixed
     */
    public function fetchValue($data, SplashRequestContext $context)
    {
        $key = $data['key'];
        $compulsory = $data['compulsory'];
        $default = $data['default'] ?? null;

        return $context->getParameter($key, $compulsory, $default);
    }
}
